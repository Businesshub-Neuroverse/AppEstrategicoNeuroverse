# config.py
import os
from pathlib import Path
from dotenv import load_dotenv
from sqlalchemy import create_engine

# -----------------------------
# üîπ Carrega .env local se existir
# -----------------------------
env_path = Path('.') / '.env'
if env_path.exists():
    load_dotenv(dotenv_path=env_path)
    print("üîπ .env carregado para ambiente local")

# -----------------------------
# üîπ Busca vari√°veis de ambiente (local ou GCP)
# -----------------------------
DB_USER = os.getenv("DB_USER")
DB_PASS = os.getenv("DB_PASS")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT", "5432")  # default 5432
DB_NAME = os.getenv("DB_NAME")

# -----------------------------
# üîπ Valida√ß√£o m√≠nima
# -----------------------------
if not all([DB_USER, DB_PASS, DB_HOST, DB_NAME]):
    raise ValueError("Alguma vari√°vel de conex√£o do banco n√£o est√° definida!")

# -----------------------------
# üîπ URI do SQLAlchemy
# -----------------------------
#DB_URI = f"postgresql+psycopg2://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# Monta a URL no formato correto para Unix Socket
DB_URI = f"postgresql+psycopg2://{DB_USER}:{DB_PASS}@/{DB_NAME}?host={DB_HOST}"

# -----------------------------
# üîπ Cria engine do SQLAlchemy
# -----------------------------
#engine = create_engine(DB_URI, echo=False, future=True)
engine = create_engine(
    DB_URI, #String de conex√£o para o banco de dados (ex: "postgresql+psycopg2://user:pass@host:port/dbname")
    pool_size=5, #mant√©m 5 conex√µes "fixas" abertas.
    max_overflow=10, #pode abrir at√© mais 10 extras, se necess√°rio.
    pool_timeout=30, #espera at√© 30s por uma conex√£o livre antes de lan√ßar erro.
    pool_recycle=300,  #recicla conex√µes a cada 5 min para evitar "stale connections" (desconex√£o inesperada pelo servidor).
    pool_pre_ping=True #testa se a conex√£o ainda est√° viva antes de usar
)

print("‚úÖ Engine criada com sucesso!")




